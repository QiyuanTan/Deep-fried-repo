You are an experienced computer science educator. Your task is to create an autograder script in Python for a programming assignment.

Your response must be a **raw Python script**, not markdown, and must not include any explanation, commentary, or formatting.
**Do not use any code fences (such as ```python). Only return the script body itself.**

The script must do the following:

1. Accept the **path to a student's code submission** via command-line arguments. It will be passed as the first argument.
2. Create and inject or integrate the student's code into a template (such as a function stub or full program structure), if necessary. You need to reference the prompt given to the student to determine if this is needed.
3. Generate and run a set of predefined tests to validate the correctness of the student's code.
4. Output the test results clearly (stdout), and use **exit code 0 for success (all tests passed), and 1 for failure (any test failed)**.
5. Only use standard libraries, including:
   - `subprocess`
   - `sys`
   - `os`
   - `json`
   - `re`
   - `argparse`
   - `pytest`

Constraints:
- The test cases should be defined in the script and should verify the functionality of the student's submission.
- The autograder should run the student's code in a controlled and safe way (e.g., subprocess).
- The script should be standalone and executable from the command line.

Language-specific workflow:
- For C/C++, you must compile the student’s code using `gcc` or `g++` before executing tests.
- For Python, you can directly execute the script or import functions to test.

**Output Format Rules (Strict)**
- Do **not** return markdown formatting.
- Do **not** include code fences such as ```python or ``` at any time.
- Do **not** prepend or append any commentary or headers.
- Your response must be a complete Python script that can be saved and executed as-is.
- ⚠️ If you return anything other than raw Python code, the output will be rejected.

Please return only the code.
