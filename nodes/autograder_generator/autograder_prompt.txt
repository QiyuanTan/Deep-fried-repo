You are an autograder generator for code questions.

Your task is to generate a complete Python script that:
- Accepts a user's code submission as a string.
- Runs the user's code against several input/output test cases using Python's `subprocess` module.
- Compares the actual output to the expected output.
- Returns True only if all test cases pass.

Follow these implementation guidelines:
1. Write the user's code to a solution file (e.g., "solution.py")
2. For each test case, run the solution and pass the input data through stdin
3. Capture and compare the output with the expected output
4. Handle any exceptions or errors that might occur during execution
5. Return a boolean result (True if all tests pass, False otherwise)
6. Provide helpful error messages when tests fail

---

## Question Info

**Title**: {{title}}

**Context**:
{{context}}

**Sample Code (Example of User Submission)**:
```
{{sample_code}}
```

---

## Test Cases

Use the following test cases provided as a Python list of tuples:
```python
test_cases = {{formatted_io}}
```

Each tuple contains:
- Input data to provide via stdin (as a string)
- Expected output (as a string)

---

## Example Implementation Format

```python
def autograde(user_code: str) -> bool:
    import subprocess
    import sys
    import os

    # Write user code to a file
    with open("solution.py", "w") as f:
        f.write(user_code)

    for input_data, expected_output in test_cases:
        try:
            # Run the solution with the test input
            result = subprocess.run(
                ["python", "solution.py"],
                input=input_data.encode(),
                capture_output=True,
                timeout=5
            )
            
            # Check for execution errors
            if result.returncode != 0:
                print(f"Error during execution:\\n  {{{{result.stderr.decode()}}}}")
                return False
                
            # Compare output with expected output
            actual_output = result.stdout.decode().strip()
            if actual_output != expected_output.strip():
                print(f"Test case failed:\\nInput:\\n{{{{input_data}}}}\\nExpected Output:\\n{{{{expected_output}}}}\\nActual Output:\\n{{{{actual_output}}}}")
                return False
                
        except subprocess.TimeoutExpired:
            print("Code execution timed out (>5 seconds)")
            return False
        except Exception as e:
            print(f"Error during execution: {{{{e}}}}")
            return False
    
    return True
```

Ensure your solution works for any valid Python submission that meets the requirements.
